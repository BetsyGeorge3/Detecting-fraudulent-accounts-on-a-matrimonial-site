# -*- coding: utf-8 -*-
"""Detecting-fraudulent-accounts-on-a-matrimonial-site.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LKE6OcFKLTArtmv3kKTefZ49zj_InGBA
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score

# Load data
data = pd.read_csv('matrimony_data.csv')

# Feature engineering (example features)
data['profile_completeness'] = data[['age', 'gender', 'location', 'description', 'photos']].notnull().mean(axis=1)
data['message_frequency'] = data['messages_sent'] / (data['days_since_joined'] + 1)
data['response_time'] = data['avg_response_time']

# Label encoding for target variable
data['is_fraud'] = data['is_fraud'].map({'yes': 1, 'no': 0})

# Selecting features and target variable
features = ['profile_completeness', 'message_frequency', 'response_time']
target = 'is_fraud'

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data[features], data[target], test_size=0.3, random_state=42)

# Training the decision tree classifier
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# Making predictions
y_pred = clf.predict(X_test)

# Evaluating the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))